#include "GeneratorDaemon.h"
#include <QDebug>
#include <QEventLoop>
#include "JsonChannel.h"
#include "JsonDataMark.h"
#include <QTextStream>
#include <QStringList>
GeneratorDaemon::GeneratorDaemon()
{
}

GeneratorDaemon::GeneratorDaemon(const QString& channelName):
	m_isConnected(false),m_loginQuery(NULL),m_tagQuery(NULL),m_channelName(channelName)
{
	moveToThread(this);
	readMarks();
}

void GeneratorDaemon::readMarks()
{
	QFile file(m_channelName+".trace");
	file.open(QIODevice::ReadOnly | QIODevice::Text);
	qDebug() << "try to open file "<< m_channelName+".trace";
	QTextStream in(&file);
	QString line = in.readLine();
	QStringList coords;
	while (!line.isNull()) {
		coords=line.split(",", QString::SkipEmptyParts);	
		qDebug() << "pushing mark into m_marks " << coords.at(1).toDouble()<< " ," << coords.at(0).toDouble(); 
		m_marks.push_back(QPointF(coords.at(1).toDouble(),coords.at(0).toDouble()));
		line = in.readLine();
	}
}

void GeneratorDaemon::run()
{
	qDebug() << "thread started";
	QEventLoop eventLoop;
	m_loginQuery = new LoginQuery("DemoUser", "test", this);
	connect(m_loginQuery, SIGNAL(connected()), SLOT(onConnected()));
	connect(m_loginQuery, SIGNAL(errorOccured(QString)), SLOT(onError(QString)));
	m_loginQuery->doRequest();
	for (;;){
		if (m_isConnected){
			qDebug() << "connected: auth_token=" << m_loginQuery->getUser()->getToken();
			if (m_tagQuery){
				for (int i=0;i<m_marks.size();i++){
					m_tagQuery->getTag()->setTime(QDateTime::currentDateTime());
					m_tagQuery->getTag()->setLatitude(m_marks.at(i).x());
					m_tagQuery->getTag()->setLongitude(m_marks.at(i).y());
					m_tagQuery->doRequest();
					qDebug() << "adding mark";
					eventLoop.processEvents(QEventLoop::ExcludeUserInputEvents, 1000);
					QThread::msleep(5000);
				}
			}
		}
		eventLoop.processEvents(QEventLoop::ExcludeUserInputEvents, 1000);
		QThread::msleep(5000);
	}
}

void GeneratorDaemon::onTagAdded()
{
	qDebug() << "tag added!";
}

void GeneratorDaemon::onConnected()
{
	m_isConnected = true;
	if(m_tagQuery == NULL){
		QSharedPointer<DataMark> mark(new JsonDataMark(0,0,"part of route "+m_channelName,
		"generated by generator:)","unknown",QDateTime::currentDateTime()));
		QSharedPointer<Channel> channel(new JsonChannel(m_channelName,"dummy channel"));
		mark->setChannel(channel);
		mark->setUser(m_loginQuery->getUser());
		m_tagQuery = new AddNewMarkQuery(mark,this);
		connect(m_tagQuery, SIGNAL(tagAdded()), SLOT(onTagAdded()));
		connect(m_tagQuery, SIGNAL(errorOccured(QString)), SLOT(onError(QString)));
	}
}

GeneratorDaemon::~GeneratorDaemon()
{
}

void GeneratorDaemon::onError(QString error)
{
}
